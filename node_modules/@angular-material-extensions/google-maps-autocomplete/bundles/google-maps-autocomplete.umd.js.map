{"version":3,"file":"google-maps-autocomplete.umd.js","sources":["../../tmp/module/directives/address-validator/mat-address-validator.directive.ts","../../tmp/module/component/mat-google-maps-autocomplete.component.ts","../../tmp/module/directives/mat-google-maps-autocomplete.directive.ts","../../tmp/module/mat-google-maps-autocomplete.module.ts"],"sourcesContent":["import {Directive, EventEmitter, forwardRef} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\nimport PlaceResult = google.maps.places.PlaceResult;\n\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\n\n@Directive({\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\n  ]\n})\nexport class MatValidateAddressDirective implements Validator {\n\n  public subscription: any;\n\n  private _address: PlaceResult;\n\n\n  constructor() {\n  }\n\n  public validate(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | any => {\n      return this.address ? null : {\n        validateAddress: {\n          valid: false\n        }\n      };\n    }\n  }\n\n  public subscribe(eventEmitter: EventEmitter<any>) {\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\n      this.address = address;\n    });\n  }\n\n  public unsubscribe() {\n    this.subscription.unsubscribe();\n  }\n\n  get address() {\n    return this._address;\n  }\n\n  set address(value) {\n    this._address = value;\n  }\n}\n","import {Component, ElementRef, EventEmitter, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {Location} from '../interfaces/location.interface';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\nexport enum Appearance {\n  STANDARD = 'standard',\n  FILL = 'fill',\n  OUTLINE = 'outline',\n  LEGACY = 'legacy',\n}\n\n@Component({\n  selector: 'mat-google-maps-autocomplete',\n  exportAs: 'matGoogleMapsAutocomplete',\n  template: `\n    <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n      <mat-label>{{addressLabelText}}</mat-label>\n      <input matInput\n             [(ngModel)]=\"address\"\n             (change)=\"onQuery($event)\"\n             placeholder=\"{{placeholderText}}\"\n             class=\"form-control\"\n             #search\n             MatValidateAddress\n             required>\n      <mat-error *ngIf=\"addressSearchControl.hasError('required')\">\n        {{requiredErrorText}}\n      </mat-error>\n      <mat-error *ngIf=\"addressSearchControl.hasError('validateAddress')\">\n        {{invalidErrorText}}\n      </mat-error>\n    </mat-form-field>\n  `,\n  styles: [`\n    .full-width{width:100%}\n  `]\n})\nexport class MatGoogleMapsAutocompleteComponent implements OnInit {\n\n  @ViewChild('search', {static: false})\n  public searchElementRef: ElementRef;\n\n  @Input()\n  addressLabelText = 'Address';\n\n  @Input()\n  placeholderText = 'Please enter the address';\n\n  @Input()\n  requiredErrorText = 'The address is required';\n\n  @Input()\n  invalidErrorText = 'The address is not valid';\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  constructor(private _mapsAPILoader: MapsAPILoader,\n              private _ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    this.addressValidator.subscribe(this.onNewPlaceResult);\n\n    const options: AutocompleteOptions = {\n      // types: ['address'],\n      // componentRestrictions: {country: this.country},\n      placeIdOnly: this.placeIdOnly,\n      strictBounds: this.strictBounds,\n      // types: this.types,\n      type: this.type\n    };\n\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.componentRestrictions = {country: this.country} : null;\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.types = this.types : null;\n\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n    this.initGoogleMapsAutocomplete();\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this._mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this._ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            // console.log('onAutocompleteSelected -> ', place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              })\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  public onQuery(event: any) {\n    // console.log('onChange()', event);\n    this.onChange.emit(this.address);\n  }\n\n  private resetAddress() {\n    this.address = null;\n    this.addressSearchControl.updateValueAndValidity();\n  }\n\n}\n","import {Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {MapsAPILoader} from '@agm/core';\nimport {Location} from '../interfaces/location.interface';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\nimport {isPlatformBrowser} from '@angular/common';\n\n@Directive({\n  selector: '[matGoogleMapsAutocomplete]',\n  exportAs: 'matGoogleMapsAutocomplete',\n})\nexport class MatGoogleMapsAutocompleteDirective implements OnInit {\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\n              public elemRef: ElementRef,\n              public mapsAPILoader: MapsAPILoader,\n              private _ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.addressValidator.subscribe(this.onNewPlaceResult);\n      const options: AutocompleteOptions = {\n        // types: ['address'],\n        // componentRestrictions: {country: this.country},\n        placeIdOnly: this.placeIdOnly,\n        strictBounds: this.strictBounds,\n        // types: this.types,\n        type: this.type\n      };\n\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.componentRestrictions = {country: this.country} : null;\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.types = this.types : null;\n\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n      this.initGoogleMapsAutocomplete();\n    }\n\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this._ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              })\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {MatGoogleMapsAutocompleteComponent} from './component/mat-google-maps-autocomplete.component';\nimport {MatInputModule} from '@angular/material';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\n\n// Export module's public API\nexport {MatGoogleMapsAutocompleteComponent, Appearance} from './component/mat-google-maps-autocomplete.component';\nexport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\nexport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\nexport {Location} from './interfaces/location.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatInputModule\n  ],\n  exports: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective\n  ],\n  declarations: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective\n  ]\n})\nexport class MatGoogleMapsAutocompleteModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MatGoogleMapsAutocompleteModule,\n      providers: []\n    };\n  }\n}\n"],"names":["Directive","NG_VALIDATORS","forwardRef","EventEmitter","FormControl","Validators","Component","MapsAPILoader","NgZone","ViewChild","Input","Output","isPlatformBrowser","Inject","PLATFORM_ID","ElementRef","NgModule","CommonModule","FormsModule","ReactiveFormsModule","MatInputModule"],"mappings":"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"}