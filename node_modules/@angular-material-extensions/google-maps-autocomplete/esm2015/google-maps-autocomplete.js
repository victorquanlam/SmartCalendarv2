import { isPlatformBrowser, CommonModule } from '@angular/common';
import { Directive, forwardRef, EventEmitter, Component, NgZone, ViewChild, Input, Output, Inject, PLATFORM_ID, ElementRef, NgModule } from '@angular/core';
import { NG_VALIDATORS, FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MapsAPILoader } from '@agm/core';
import { MatInputModule } from '@angular/material';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts
class MatValidateAddressDirective {
    constructor() {
    }
    /**
     * @return {?}
     */
    validate() {
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            return this.address ? null : {
                validateAddress: {
                    valid: false
                }
            };
        });
    }
    /**
     * @param {?} eventEmitter
     * @return {?}
     */
    subscribe(eventEmitter) {
        this.subscription = eventEmitter.subscribe((/**
         * @param {?} address
         * @return {?}
         */
        (address) => {
            this.address = address;
        }));
    }
    /**
     * @return {?}
     */
    unsubscribe() {
        this.subscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    get address() {
        return this._address;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set address(value) {
        this._address = value;
    }
}
MatValidateAddressDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',
                providers: [
                    { provide: NG_VALIDATORS, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => MatValidateAddressDirective)), multi: true }
                ]
            },] },
];
/** @nocollapse */
MatValidateAddressDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const Appearance = {
    STANDARD: 'standard',
    FILL: 'fill',
    OUTLINE: 'outline',
    LEGACY: 'legacy',
};
class MatGoogleMapsAutocompleteComponent {
    /**
     * @param {?} _mapsAPILoader
     * @param {?} _ngZone
     */
    constructor(_mapsAPILoader, _ngZone) {
        this._mapsAPILoader = _mapsAPILoader;
        this._ngZone = _ngZone;
        this.addressLabelText = 'Address';
        this.placeholderText = 'Please enter the address';
        this.requiredErrorText = 'The address is required';
        this.invalidErrorText = 'The address is not valid';
        this.appearance = Appearance.STANDARD;
        this.autoCompleteOptions = {};
        this.onChange = new EventEmitter();
        this.onAutocompleteSelected = new EventEmitter();
        this.onLocationSelected = new EventEmitter();
        this.onNewPlaceResult = new EventEmitter();
        this.addressValidator = new MatValidateAddressDirective();
        this.addressSearchControl = new FormControl({ value: null }, Validators.compose([
            Validators.required,
            this.addressValidator.validate()
        ]));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.addressValidator.subscribe(this.onNewPlaceResult);
        /** @type {?} */
        const options = {
            // types: ['address'],
            // componentRestrictions: {country: this.country},
            placeIdOnly: this.placeIdOnly,
            strictBounds: this.strictBounds,
            // types: this.types,
            type: this.type
        };
        // tslint:disable-next-line:no-unused-expression
        this.country ? options.componentRestrictions = { country: this.country } : null;
        // tslint:disable-next-line:no-unused-expression
        this.country ? options.types = this.types : null;
        this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);
        this.initGoogleMapsAutocomplete();
    }
    /**
     * @return {?}
     */
    initGoogleMapsAutocomplete() {
        this._mapsAPILoader
            .load()
            .then((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);
            autocomplete.addListener('place_changed', (/**
             * @return {?}
             */
            () => {
                this._ngZone.run((/**
                 * @return {?}
                 */
                () => {
                    // get the place result
                    /** @type {?} */
                    const place = autocomplete.getPlace();
                    if (!place.place_id || place.geometry === undefined || place.geometry === null) {
                        // place result is not valid
                        return;
                    }
                    this.address = place.formatted_address;
                    this.onAutocompleteSelected.emit(place);
                    // console.log('onAutocompleteSelected -> ', place);
                    this.onLocationSelected.emit({
                        latitude: place.geometry.location.lat(),
                        longitude: place.geometry.location.lng()
                    });
                }));
            }));
        }))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        (err) => console.log(err)));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onQuery(event) {
        // console.log('onChange()', event);
        this.onChange.emit(this.address);
    }
    /**
     * @private
     * @return {?}
     */
    resetAddress() {
        this.address = null;
        this.addressSearchControl.updateValueAndValidity();
    }
}
MatGoogleMapsAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-google-maps-autocomplete',
                exportAs: 'matGoogleMapsAutocomplete',
                template: `
    <mat-form-field class="full-width" [appearance]="appearance">
      <mat-label>{{addressLabelText}}</mat-label>
      <input matInput
             [(ngModel)]="address"
             (change)="onQuery($event)"
             placeholder="{{placeholderText}}"
             class="form-control"
             #search
             MatValidateAddress
             required>
      <mat-error *ngIf="addressSearchControl.hasError('required')">
        {{requiredErrorText}}
      </mat-error>
      <mat-error *ngIf="addressSearchControl.hasError('validateAddress')">
        {{invalidErrorText}}
      </mat-error>
    </mat-form-field>
  `,
                styles: [`
    .full-width{width:100%}
  `]
            },] },
];
/** @nocollapse */
MatGoogleMapsAutocompleteComponent.ctorParameters = () => [
    { type: MapsAPILoader },
    { type: NgZone }
];
MatGoogleMapsAutocompleteComponent.propDecorators = {
    searchElementRef: [{ type: ViewChild, args: ['search', { static: false },] }],
    addressLabelText: [{ type: Input }],
    placeholderText: [{ type: Input }],
    requiredErrorText: [{ type: Input }],
    invalidErrorText: [{ type: Input }],
    appearance: [{ type: Input }],
    address: [{ type: Input }],
    country: [{ type: Input }],
    placeIdOnly: [{ type: Input }],
    strictBounds: [{ type: Input }],
    types: [{ type: Input }],
    type: [{ type: Input }],
    autoCompleteOptions: [{ type: Input }],
    onChange: [{ type: Output }],
    onAutocompleteSelected: [{ type: Output }],
    onLocationSelected: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatGoogleMapsAutocompleteDirective {
    /**
     * @param {?} platformId
     * @param {?} elemRef
     * @param {?} mapsAPILoader
     * @param {?} _ngZone
     */
    constructor(platformId, elemRef, mapsAPILoader, _ngZone) {
        this.platformId = platformId;
        this.elemRef = elemRef;
        this.mapsAPILoader = mapsAPILoader;
        this._ngZone = _ngZone;
        this.autoCompleteOptions = {};
        this.onChange = new EventEmitter();
        this.onAutocompleteSelected = new EventEmitter();
        this.onLocationSelected = new EventEmitter();
        this.onNewPlaceResult = new EventEmitter();
        this.addressValidator = new MatValidateAddressDirective();
        this.addressSearchControl = new FormControl({ value: null }, Validators.compose([
            Validators.required,
            this.addressValidator.validate()
        ]));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.addressValidator.subscribe(this.onNewPlaceResult);
            /** @type {?} */
            const options = {
                // types: ['address'],
                // componentRestrictions: {country: this.country},
                placeIdOnly: this.placeIdOnly,
                strictBounds: this.strictBounds,
                // types: this.types,
                type: this.type
            };
            // tslint:disable-next-line:no-unused-expression
            this.country ? options.componentRestrictions = { country: this.country } : null;
            // tslint:disable-next-line:no-unused-expression
            this.country ? options.types = this.types : null;
            this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);
            this.initGoogleMapsAutocomplete();
        }
    }
    /**
     * @return {?}
     */
    initGoogleMapsAutocomplete() {
        this.mapsAPILoader
            .load()
            .then((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);
            autocomplete.addListener('place_changed', (/**
             * @return {?}
             */
            () => {
                this._ngZone.run((/**
                 * @return {?}
                 */
                () => {
                    // get the place result
                    /** @type {?} */
                    const place = autocomplete.getPlace();
                    if (!place.place_id || place.geometry === undefined || place.geometry === null) {
                        // place result is not valid
                        return;
                    }
                    this.address = place.formatted_address;
                    this.onAutocompleteSelected.emit(place);
                    this.onLocationSelected.emit({
                        latitude: place.geometry.location.lat(),
                        longitude: place.geometry.location.lng()
                    });
                }));
            }));
        }))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        (err) => console.log(err)));
    }
}
MatGoogleMapsAutocompleteDirective.decorators = [
    { type: Directive, args: [{
                selector: '[matGoogleMapsAutocomplete]',
                exportAs: 'matGoogleMapsAutocomplete',
            },] },
];
/** @nocollapse */
MatGoogleMapsAutocompleteDirective.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ElementRef },
    { type: MapsAPILoader },
    { type: NgZone }
];
MatGoogleMapsAutocompleteDirective.propDecorators = {
    address: [{ type: Input }],
    country: [{ type: Input }],
    placeIdOnly: [{ type: Input }],
    strictBounds: [{ type: Input }],
    types: [{ type: Input }],
    type: [{ type: Input }],
    autoCompleteOptions: [{ type: Input }],
    onChange: [{ type: Output }],
    onAutocompleteSelected: [{ type: Output }],
    onLocationSelected: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatGoogleMapsAutocompleteModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: MatGoogleMapsAutocompleteModule,
            providers: []
        };
    }
}
MatGoogleMapsAutocompleteModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MatInputModule
                ],
                exports: [
                    MatGoogleMapsAutocompleteComponent,
                    MatGoogleMapsAutocompleteDirective,
                    MatValidateAddressDirective
                ],
                declarations: [
                    MatGoogleMapsAutocompleteComponent,
                    MatGoogleMapsAutocompleteDirective,
                    MatValidateAddressDirective
                ]
            },] },
];

export { Appearance, MatGoogleMapsAutocompleteComponent, MatGoogleMapsAutocompleteDirective, MatGoogleMapsAutocompleteModule, MatValidateAddressDirective };
//# sourceMappingURL=google-maps-autocomplete.js.map
