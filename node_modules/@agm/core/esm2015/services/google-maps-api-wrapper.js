import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { MapsAPILoader } from './maps-api-loader/maps-api-loader';
/**
 * Wrapper class that handles the communication with the Google Maps Javascript
 * API v3
 */
let GoogleMapsAPIWrapper = class GoogleMapsAPIWrapper {
    constructor(_loader, _zone) {
        this._loader = _loader;
        this._zone = _zone;
        this._map =
            new Promise((resolve) => { this._mapResolver = resolve; });
    }
    createMap(el, mapOptions) {
        return this._zone.runOutsideAngular(() => {
            return this._loader.load().then(() => {
                const map = new google.maps.Map(el, mapOptions);
                this._mapResolver(map);
                return;
            });
        });
    }
    setMapOptions(options) {
        this._map.then((m) => { m.setOptions(options); });
    }
    /**
     * Creates a google map marker with the map context
     */
    createMarker(options = {}, addToMap = true) {
        return this._map.then((map) => {
            if (addToMap) {
                options.map = map;
            }
            return new google.maps.Marker(options);
        });
    }
    createInfoWindow(options) {
        return this._map.then(() => { return new google.maps.InfoWindow(options); });
    }
    /**
     * Creates a google.map.Circle for the current map.
     */
    createCircle(options) {
        return this._map.then((map) => {
            if (typeof options.strokePosition === 'string') {
                options.strokePosition = google.maps.StrokePosition[options.strokePosition];
            }
            options.map = map;
            return new google.maps.Circle(options);
        });
    }
    /**
     * Creates a google.map.Rectangle for the current map.
     */
    createRectangle(options) {
        return this._map.then((map) => {
            options.map = map;
            return new google.maps.Rectangle(options);
        });
    }
    createPolyline(options) {
        return this.getNativeMap().then((map) => {
            let line = new google.maps.Polyline(options);
            line.setMap(map);
            return line;
        });
    }
    createPolygon(options) {
        return this.getNativeMap().then((map) => {
            let polygon = new google.maps.Polygon(options);
            polygon.setMap(map);
            return polygon;
        });
    }
    /**
     * Creates a new google.map.Data layer for the current map
     */
    createDataLayer(options) {
        return this._map.then(m => {
            let data = new google.maps.Data(options);
            data.setMap(m);
            return data;
        });
    }
    /**
     * Creates a TransitLayer instance for a map
     * @param {TransitLayerOptions} options - used for setting layer options
     * @returns {Promise<TransitLayer>} a new transit layer object
     */
    createTransitLayer(options) {
        return this._map.then((map) => {
            let newLayer = new google.maps.TransitLayer();
            newLayer.setMap(options.visible ? map : null);
            return newLayer;
        });
    }
    /**
     * Creates a BicyclingLayer instance for a map
     * @param {BicyclingLayerOptions} options - used for setting layer options
     * @returns {Promise<BicyclingLayer>} a new bicycling layer object
     */
    createBicyclingLayer(options) {
        return this._map.then((map) => {
            let newLayer = new google.maps.BicyclingLayer();
            newLayer.setMap(options.visible ? map : null);
            return newLayer;
        });
    }
    /**
     * Determines if given coordinates are insite a Polygon path.
     */
    containsLocation(latLng, polygon) {
        return google.maps.geometry.poly.containsLocation(latLng, polygon);
    }
    subscribeToMapEvent(eventName) {
        return new Observable((observer) => {
            this._map.then((m) => {
                m.addListener(eventName, (arg) => { this._zone.run(() => observer.next(arg)); });
            });
        });
    }
    clearInstanceListeners() {
        this._map.then((map) => {
            google.maps.event.clearInstanceListeners(map);
        });
    }
    setCenter(latLng) {
        return this._map.then((map) => map.setCenter(latLng));
    }
    getZoom() { return this._map.then((map) => map.getZoom()); }
    getBounds() {
        return this._map.then((map) => map.getBounds());
    }
    getMapTypeId() {
        return this._map.then((map) => map.getMapTypeId());
    }
    setZoom(zoom) {
        return this._map.then((map) => map.setZoom(zoom));
    }
    getCenter() {
        return this._map.then((map) => map.getCenter());
    }
    panTo(latLng) {
        return this._map.then((map) => map.panTo(latLng));
    }
    panBy(x, y) {
        return this._map.then((map) => map.panBy(x, y));
    }
    fitBounds(latLng, padding) {
        return this._map.then((map) => map.fitBounds(latLng, padding));
    }
    panToBounds(latLng, padding) {
        return this._map.then((map) => map.panToBounds(latLng, padding));
    }
    /**
     * Returns the native Google Maps Map instance. Be careful when using this instance directly.
     */
    getNativeMap() { return this._map; }
    /**
     * Triggers the given event name on the map instance.
     */
    triggerMapEvent(eventName) {
        return this._map.then((m) => google.maps.event.trigger(m, eventName));
    }
};
GoogleMapsAPIWrapper.ctorParameters = () => [
    { type: MapsAPILoader },
    { type: NgZone }
];
GoogleMapsAPIWrapper = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [MapsAPILoader, NgZone])
], GoogleMapsAPIWrapper);
export { GoogleMapsAPIWrapper };
//# sourceMappingURL=data:application/json;base64,