{
  "version": 3,
  "file": "ngx-filter-pipe.umd.js",
  "sources": [
    "ng://ngx-filter-pipe/out/src/app/shared/ngx-filter-pipe/ngx-filter.module.ts",
    "ng://ngx-filter-pipe/out/src/app/shared/ngx-filter-pipe/ngx-filter.pipe.ts"
  ],
  "sourcesContent": [
    "/**\n * Created by vadimdez on 28/11/2016.\n */\nimport { NgModule } from '@angular/core';\nimport { FilterPipe } from './ngx-filter.pipe';\n\n@NgModule({\n  declarations: [FilterPipe],\n  providers: [FilterPipe],\n  exports: [FilterPipe]\n})\n\nexport class FilterPipeModule {}\n",
    "/**\n * Created by vadimdez on 28/06/16.\n */\nimport { Pipe, Injectable, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'filterBy',\n  pure: false\n})\n\n@Injectable()\nexport class FilterPipe implements PipeTransform {\n\n  static isFoundOnWalking(value, key) {\n    let walker = value;\n    let found = false;\n    do {\n      if (walker.hasOwnProperty(key) || Object.getOwnPropertyDescriptor(walker, key)) {\n        found = true;\n        break;\n      }\n    } while (walker = Object.getPrototypeOf(walker));\n\n    return found;\n  }\n\n  static isNumber(value) {\n    return !isNaN(parseInt(value, 10)) && isFinite(value);\n  }\n\n  /**\n   * Checks function's value if type is function otherwise same value\n   */\n  static getValue(value: any): any {\n    return typeof value === 'function' ? value() : value;\n  }\n\n  private filterByString(filter) {\n    if (filter) {\n      filter = filter.toLowerCase();\n    }\n    return value => !filter || (value ? ('' + value).toLowerCase().indexOf(filter) !== -1 : false);\n  }\n\n  private filterByBoolean(filter) {\n    return value => Boolean(value) === filter;\n  }\n\n  private filterByObject(filter) {\n    return value => {\n      for (const key in filter) {\n\n        if (key === '$or') {\n          if (!this.filterByOr(filter.$or)(FilterPipe.getValue(value))) {\n            return false;\n          }\n          continue;\n        }\n\n        if (!value || !FilterPipe.isFoundOnWalking(value, key)) {\n          return false;\n        }\n\n        if (!this.isMatching(filter[key], FilterPipe.getValue(value[key]))) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n\n  private isMatching(filter, val) {\n    switch (typeof  filter) {\n      case 'boolean':\n        return this.filterByBoolean(filter)(val);\n      case 'string':\n        return this.filterByString(filter)(val);\n      case 'object':\n       return this.filterByObject(filter)(val);\n    }\n    return this.filterDefault(filter)(val);\n  }\n\n  /**\n   * Filter value by $or\n   */\n  private filterByOr(filter: any[]): (value: any) => boolean {\n    return (value: any) => {\n      const length = filter.length;\n\n      const arrayComparison = (i) => value.indexOf(filter[i]) !== -1;\n      const otherComparison = (i) => this.isMatching(filter[i], value);\n      const comparison = Array.isArray(value) ? arrayComparison : otherComparison;\n\n      for (let i = 0; i < length; i++) {\n        if (comparison(i)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  }\n\n  /**\n   * Default filterDefault function\n   */\n  private filterDefault(filter: any): (value: any) => boolean {\n    return (value: any) => filter === undefined || filter == value;\n  }\n\n  transform(array: any[], filter: any): any {\n    if (!array) {\n      return array;\n    }\n\n    switch (typeof filter) {\n      case 'boolean':\n        return array.filter(this.filterByBoolean(filter));\n      case 'string':\n        if (FilterPipe.isNumber(filter)) {\n          return array.filter(this.filterDefault(filter));\n        }\n        return array.filter(this.filterByString(filter));\n      case 'object':\n        return array.filter(this.filterByObject(filter));\n      case 'function':\n        return array.filter(filter);\n    }\n    return array.filter(this.filterDefault(filter));\n  }\n}\n"
  ],
  "names": [
    "Pipe"
  ],
  "mappings": "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"
}
