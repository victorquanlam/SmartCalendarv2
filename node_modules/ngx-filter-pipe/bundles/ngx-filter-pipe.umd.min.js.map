{
  "version": 3,
  "file": "ngx-filter-pipe.umd.min.js",
  "sources": [
    "ng://ngx-filter-pipe/out/src/app/shared/ngx-filter-pipe/ngx-filter.pipe.ts",
    "ng://ngx-filter-pipe/out/src/app/shared/ngx-filter-pipe/ngx-filter.module.ts"
  ],
  "sourcesContent": [
    "/**\n * Created by vadimdez on 28/06/16.\n */\nimport { Pipe, Injectable, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'filterBy',\n  pure: false\n})\n\n@Injectable()\nexport class FilterPipe implements PipeTransform {\n\n  static isFoundOnWalking(value, key) {\n    let walker = value;\n    let found = false;\n    do {\n      if (walker.hasOwnProperty(key) || Object.getOwnPropertyDescriptor(walker, key)) {\n        found = true;\n        break;\n      }\n    } while (walker = Object.getPrototypeOf(walker));\n\n    return found;\n  }\n\n  static isNumber(value) {\n    return !isNaN(parseInt(value, 10)) && isFinite(value);\n  }\n\n  /**\n   * Checks function's value if type is function otherwise same value\n   */\n  static getValue(value: any): any {\n    return typeof value === 'function' ? value() : value;\n  }\n\n  private filterByString(filter) {\n    if (filter) {\n      filter = filter.toLowerCase();\n    }\n    return value => !filter || (value ? ('' + value).toLowerCase().indexOf(filter) !== -1 : false);\n  }\n\n  private filterByBoolean(filter) {\n    return value => Boolean(value) === filter;\n  }\n\n  private filterByObject(filter) {\n    return value => {\n      for (const key in filter) {\n\n        if (key === '$or') {\n          if (!this.filterByOr(filter.$or)(FilterPipe.getValue(value))) {\n            return false;\n          }\n          continue;\n        }\n\n        if (!value || !FilterPipe.isFoundOnWalking(value, key)) {\n          return false;\n        }\n\n        if (!this.isMatching(filter[key], FilterPipe.getValue(value[key]))) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n\n  private isMatching(filter, val) {\n    switch (typeof  filter) {\n      case 'boolean':\n        return this.filterByBoolean(filter)(val);\n      case 'string':\n        return this.filterByString(filter)(val);\n      case 'object':\n       return this.filterByObject(filter)(val);\n    }\n    return this.filterDefault(filter)(val);\n  }\n\n  /**\n   * Filter value by $or\n   */\n  private filterByOr(filter: any[]): (value: any) => boolean {\n    return (value: any) => {\n      const length = filter.length;\n\n      const arrayComparison = (i) => value.indexOf(filter[i]) !== -1;\n      const otherComparison = (i) => this.isMatching(filter[i], value);\n      const comparison = Array.isArray(value) ? arrayComparison : otherComparison;\n\n      for (let i = 0; i < length; i++) {\n        if (comparison(i)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  }\n\n  /**\n   * Default filterDefault function\n   */\n  private filterDefault(filter: any): (value: any) => boolean {\n    return (value: any) => filter === undefined || filter == value;\n  }\n\n  transform(array: any[], filter: any): any {\n    if (!array) {\n      return array;\n    }\n\n    switch (typeof filter) {\n      case 'boolean':\n        return array.filter(this.filterByBoolean(filter));\n      case 'string':\n        if (FilterPipe.isNumber(filter)) {\n          return array.filter(this.filterDefault(filter));\n        }\n        return array.filter(this.filterByString(filter));\n      case 'object':\n        return array.filter(this.filterByObject(filter));\n      case 'function':\n        return array.filter(filter);\n    }\n    return array.filter(this.filterDefault(filter));\n  }\n}\n",
    "/**\n * Created by vadimdez on 28/11/2016.\n */\nimport { NgModule } from '@angular/core';\nimport { FilterPipe } from './ngx-filter.pipe';\n\n@NgModule({\n  declarations: [FilterPipe],\n  providers: [FilterPipe],\n  exports: [FilterPipe]\n})\n\nexport class FilterPipeModule {}\n"
  ],
  "names": [
    "FilterPipe",
    "isFoundOnWalking",
    "value",
    "key",
    "walker",
    "found",
    "hasOwnProperty",
    "Object",
    "getOwnPropertyDescriptor",
    "getPrototypeOf",
    "isNumber",
    "isNaN",
    "parseInt",
    "isFinite",
    "getValue",
    "prototype",
    "filterByString",
    "filter",
    "toLowerCase",
    "filterByBoolean",
    "filterByObject",
    "_this",
    "this",
    "isMatching",
    "filterByOr",
    "$or",
    "val",
    "length",
    "comparison",
    "Array",
    "isArray",
    "i",
    "indexOf",
    "transform",
    "array",
    "filterDefault",
    "decorators",
    "type",
    "Pipe",
    "args",
    "FilterPipeModule"
  ],
  "mappings": "2QAGA,SAAAA,KAGA,OAQAA,EAAAC,iBAAA,SAAuBC,EAAvBC,GACI,IAAIC,EAARF,EACAG,GAAA,EACA,GACA,GAAQD,EAARE,eAAAH,IAAAI,OAAAC,yBAAAJ,EAAAD,GAAA,CACQE,GAAR,EACA,aAGAD,EAAAG,OAAAE,eAAAL,IACA,OAAAC,GAGAL,EAAWU,SAAX,SAAgCR,GAChC,OAAAS,MAAAC,SAAAV,EAAA,MAAAW,SAAAX,IAMAF,EAAWc,SAAX,SAAAZ,GACA,MAAA,mBAAAA,EAAAA,IAAAA,GAGAF,EAAAe,UAAAC,eAAA,SAAAC,UACMA,IACNA,EAAAA,EAAAC,iFAKAlB,EAAWe,UAAXI,gBAAuC,SAAvCF,8CAIAjB,EAAWe,UAAXK,eAAA,SAAAH,GACA,IAAMI,EAANC,KAEA,OAAA,SAAApB,GACA,IAAA,IAAAC,KAAAc,EACA,GAAA,QAAAd,EAAA,CAOA,IAAAD,IAAAF,EAAAC,iBAAAC,EAAAC,GAEY,OAAZ,EAEA,IAAAkB,EAAAE,WAAAN,EAAAd,GAAAH,EAAAc,SAAAZ,EAAAC,KACA,OAAA,OAXA,IAAAkB,EAAAG,WAAAP,EAAAQ,IAAAJ,CAAArB,EAAAc,SAAAZ,IACA,OAAA,aAkBAF,EAAAe,UAAAQ,WAAA,SAAAN,EAAAS,GACA,cAAeT,GACT,IAAK,UACH,OAAOK,KAAKH,gBAApBF,EAAeK,CAAfI,GACM,IAAK,SACJ,OAAOJ,KAAKN,eAAeC,EAApBK,CAA4BI,GAC1C,IAAA,SACA,OAAAJ,KAAAF,eAAAH,EAAAK,CAAAI,oCAQA1B,EAAAe,UAAAS,WAAA,SAAAP,GAEA,IAAMI,EAANC,KACA,OAAA,SAAApB,GAMA,IALM,IAANyB,EAAAV,EAAAU,OAIAC,EAAAC,MAAAC,QAAA5B,GAFA,SAAA6B,GAAA,OAAA,IAAA7B,EAAA8B,QAAAf,EAAAc,KACA,SAAAA,GAAA,OAAAV,EAAAE,WAAAN,EAAAc,GAAA7B,IAEA6B,EAAA,EAAAA,EAAAJ,EAAAI,IACA,GAAAH,EAAAG,GAEA,OAAA,mGAcA/B,EAAAe,UAAAkB,UAAA,SAAAC,EAAAjB,GAEI,IAAJiB,EACM,OAANA,EAEA,cAAAjB,GACA,IAAA,UACA,OAAAiB,EAAAjB,OAAAK,KAAAH,gBAAAF,IACA,IAAS,SACD,OAARjB,EAAAU,SAAgCO,GAChCiB,EAAAjB,OAAAK,KAAAa,cAAAlB,IAEAiB,EAAAjB,OAAAK,KAAAN,eAAAC,IACA,IAAA,SACA,OAAAiB,EAAAjB,OAAAK,KAAAF,eAAAH,IACA,IAAA,WACA,OAAAiB,EAAAjB,OAAAA,2CA7HAjB,KAEAA,EAAAoC,aAEAC,KAACC,EAAAA,KAADC,6FCJA,IAAAC,EAAA,WAGA,OAFA,aADS"
}
